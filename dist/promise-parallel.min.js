var promiseParallelSerial=function(t){"use strict";var e=new(function(){function t(){this.list=[],this.waitList=[],this.parallelNum=2}return Object.defineProperty(t.prototype,"parallel",{get:function(){return this.parallelNum},set:function(t){this.parallelNum=t},enumerable:!1,configurable:!0}),t.prototype.add=function(t){var e=this;if(this.list.length<this.parallelNum){this.list.push(t);var n=t();return this.changeList(n),n}return new Promise((function(n,i){try{e.waitList.push({promise:t,cb:n})}catch(t){i(t)}}))},t.prototype.changeList=function(t){var e=this;null==t||t.then((function(){if(e.waitList.length>0){var t=e.waitList.shift(),n=null==t?void 0:t.promise();null==n||n.then((function(){null==t||t.cb()})),n&&e.changeList(n)}else e.list.length=0})).catch((function(t){return console.log(t),Promise.reject(t)}))},t}());return t.changeParallel=function(t){return t?(t=t<0?0:t,e.parallel=t,t):e.parallel},t.default=function(t,n){for(var i,r=[],l=2;l<arguments.length;l++)r[l-2]=arguments[l];return null===(i=e.add((function(){return t.apply(n,r)})))||void 0===i?void 0:i.then((function(t){return Promise.resolve(t)})).catch((function(t){return Promise.reject(t)}))},t}({});
