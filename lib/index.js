var t=function(){function t(){this.list=[],this.waitList=[],this.parallelNum=2}return Object.defineProperty(t.prototype,"parallel",{get:function(){return this.parallelNum},set:function(t){this.parallelNum=t},enumerable:!1,configurable:!0}),t.prototype.add=function(t){var n=this;if(this.list.length<this.parallelNum){this.list.push(t);var e=t();return this.changeList(e),e}return new Promise((function(e,i){try{n.waitList.push({promise:t,cb:e})}catch(t){i(t)}}))},t.prototype.changeList=function(t){var n=this;t.then((function(){if(n.waitList.length>0){var t=n.waitList.shift(),e=null==t?void 0:t.promise();null==e||e.then((function(){null==t||t.cb()})),e&&n.changeList(e)}}))},t}(),n=function(t,n){for(var e=[],i=2;i<arguments.length;i++)e[i-2]=arguments[i];return new Promise((function(i){t.apply(n,e).then((function(t){return i(t)}))}))},e=new t;function i(t){if(!t)return e.parallel;t=t<0?0:t,e.parallel=t}export default function(t,i){for(var r=[],l=2;l<arguments.length;l++)r[l-2]=arguments[l];return e.add((function(){return n(t,i,r)})).then((function(t){return Promise.resolve(t)}))}export{i as changeParallel};
