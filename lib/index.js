var t=new(function(){function t(){this.list=[],this.waitList=[],this.parallelNum=2}return Object.defineProperty(t.prototype,"parallel",{get:function(){return this.parallelNum},set:function(t){this.parallelNum=t},enumerable:!1,configurable:!0}),t.prototype.add=function(t){var n=this;if("function"!=typeof t)throw new Error("fn must be a function");if(this.list.length<this.parallelNum){this.list.push(t);var e=t();if("function"!=typeof e.then)throw new Error("fn function must return a <Promise>");return this.changeList(e),e}return new Promise((function(e,r){try{n.waitList.push({promise:t,cb:e})}catch(t){r(t)}}))},t.prototype.changeList=function(t){var n=this;null==t||t.then((function(){if(n.waitList.length>0){var t=n.waitList.shift(),e=null==t?void 0:t.promise();null==e||e.then((function(){null==t||t.cb()})),e&&n.changeList(e)}else n.list.length=0})).catch((function(t){console.log(t)}))},t}()),n=function(n,e){for(var r,i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];return null===(r=t.add((function(){return n.apply(e,i)})))||void 0===r?void 0:r.then((function(t){return Promise.resolve(t)})).catch((function(t){return Promise.reject(t)}))};function e(n){if(null!=n){if("number"!=typeof n)throw new TypeError("function changeParallel params must be number");return n=n<=0?1:n,t.parallel=n,n}return t.parallel}n.version="1.0.8";export default n;export{e as changeParallel};
